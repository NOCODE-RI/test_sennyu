name: meeting-minutes-automation

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 手動実行ボタンを追加
    inputs:
      minutes_file:
        description: '議事録ファイル名（例：2025-01-20_商談議事録.txt）'
        required: false
        default: ''

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-issues-and-pr:
    name: Process minutes -> issues and PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Collect changed minutes files
        id: changes
        run: |
          # 手動実行の場合は指定されたファイルを使用
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.minutes_file }}" ]; then
            echo "Manual trigger with file: ${{ github.event.inputs.minutes_file }}"
            # ファイルが存在するかチェック
            if [ -f "${{ github.event.inputs.minutes_file }}" ]; then
              echo "files<<EOF" >> $GITHUB_OUTPUT
              echo "${{ github.event.inputs.minutes_file }}" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "Error: File ${{ github.event.inputs.minutes_file }} not found"
              exit 1
            fi
          else
            # 通常のpushの場合、より確実なファイル検出
            echo "Push trigger - detecting changed files..."
            CHANGED=$(git log --name-only --pretty=format: -1 | grep -E '^(00_商談段階/04_議事録/|10_要件定義段階/07_議事録/).+\.(md|txt)$' || true)
            echo "files<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create issue per minutes file
        if: steps.changes.outputs.files != ''
        uses: actions/github-script@v7
        with:
          script: |
            const raw = `${{ steps.changes.outputs.files }}`.trim();
            if (!raw) { core.info('No minutes files changed.'); return; }
            const files = raw.split('\n').filter(Boolean);
            for (const path of files) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[議事録更新] ${path}`,
                body: [
                  '以下の議事録が追加/更新されました。',
                  '',
                  `- ファイル: \`${path}\``,
                  '',
                  '商談段階/要件定義段階に応じて、テンプレのチェックリストを参照し更新してください。',
                  '',
                  '関連テンプレート:',
                  '- `.github/ISSUE_TEMPLATE/meeting-minutes-update.md`',
                  '- `.github/pull_request_template.md`',
                  '',
                  '**手動実行の場合**: このIssueは手動でワークフローを実行した際に作成されました。',
                ].join('\n'),
                labels: ['meeting-minutes', 'documentation']
              });
            }

      - name: Setup Node.js
        if: steps.changes.outputs.files != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Append placeholder AI draft sections
        if: steps.changes.outputs.files != ''
        run: |
          chmod +x scripts/minutes_to_drafts.js
          CHANGED_MINUTES="${{ steps.changes.outputs.files }}" node scripts/minutes_to_drafts.js

      - name: Generate AI drafts via Claude
        if: steps.changes.outputs.files != ''
        env:
          CHANGED_MINUTES: ${{ steps.changes.outputs.files }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          chmod +x scripts/generate_ai_drafts.js
          node scripts/generate_ai_drafts.js

      - name: Create Pull Request
        if: steps.changes.outputs.files != ''
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "docs: 議事録由来のAI下書きを追加/更新"
          title: "docs: 議事録由来のAI下書きを追加/更新"
          body: |
            議事録更新を検知し、関連ドキュメントにAI下書きセクションを追加/更新しました。

            - 対象議事録:
            ${{ steps.changes.outputs.files }}

            レビュー観点:
            - 下書き内容の妥当性
            - 追記セクションの位置/重複の有無
          branch: ci/ai-draft-from-minutes
          labels: documentation
